// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @unique
  password      String
  email         String    @unique
  emailVerified DateTime? @db.Timestamptz
  image         String?
  accounts      Account[]
  sessions      Session[]

  fullName String
  role     Role

  scannedTickets EmittedTicket[] @relation("USER_X_EMITTED_TICKET")

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  @@map("user")
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamptz
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz

  @@id([identifier, token])
  @@map("verificationToken")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

model Event {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String
  coverImageUrl String
  slug          String
  startingDate  DateTime @db.Timestamptz
  endingDate    DateTime @db.Timestamptz
  minAge        Int?

  isDeleted Boolean @default(false)
  isActive  Boolean @default(false)

  locationId String    @db.Uuid
  location   Location? @relation("EVENT_X_LOCATION", fields: [locationId], references: [id])

  categoryId String        @db.Uuid
  category   EventCategory @relation("EVENT_X_CATEGORY", fields: [categoryId], references: [id])

  ticketTypes TicketType[] @relation("EVENT_X_TICKET_TYPE")

  ticketGroups TicketGroup[] @relation("EVENT_X_TICKET_GROUP")

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  @@map("event")
}

model Location {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  address       String
  googleMapsUrl String
  capacity      Int
  event         Event[] @relation("EVENT_X_LOCATION")

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  @@map("location")
}

model TicketType {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String
  price          Float?
  maxAvailable   Int
  maxPerPurchase Int
  category       TicketTypeCategory
  maxSellDate    DateTime?          @db.Timestamptz
  visibleInWeb   Boolean            @default(true)

  scanLimit DateTime? @db.Timestamptz

  event   Event  @relation("EVENT_X_TICKET_TYPE", fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @db.Uuid

  tickets EmittedTicket[] @relation("TICKET_TYPE_X_EMITTED_TICKET")

  ticketTypePerGroup TicketTypePerGroup[] @relation("TICKET_TYPE_PER_GROUP_X_TICKET_TYPE")

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  @@map("ticketType")
}

model TicketGroup {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  status        TicketGroupStatus
  amountTickets Int               @default(0)
  eventId       String            @map("event_id") @db.Uuid
  event         Event             @relation("EVENT_X_TICKET_GROUP", fields: [eventId], references: [id], onDelete: Cascade)
  invitedBy     String?

  tickets EmittedTicket[] @relation("TICKET_X_TICKET_GROUP")

  ticketTypePerGroup TicketTypePerGroup[] @relation("TICKET_TYPE_PER_GROUP_X_TICKET_GROUP")

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  @@map("ticketGroup")
}

model TicketTypePerGroup {
  amount       Int
  ticketTypeId String     @db.Uuid
  type         TicketType @relation("TICKET_TYPE_PER_GROUP_X_TICKET_TYPE", fields: [ticketTypeId], references: [id])

  ticketGroupId String       @db.Uuid
  ticketGroup   TicketGroup? @relation("TICKET_TYPE_PER_GROUP_X_TICKET_GROUP", fields: [ticketGroupId], references: [id], onDelete: Cascade)

  @@id([ticketTypeId, ticketGroupId])
  @@map("ticketTypePerGroup")
}

model EmittedTicket {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullName       String
  dni            String
  mail           String
  gender         String
  phoneNumber    String
  instagram      String?
  birthDate      String
  paidOnLocation Boolean @default(false)

  scanned   Boolean   @default(false)
  scannedAt DateTime? @db.Timestamptz

  scannedByUserId String? @db.Uuid
  scannedBy       User?   @relation("USER_X_EMITTED_TICKET", fields: [scannedByUserId], references: [id])

  ticketTypeId String     @db.Uuid
  type         TicketType @relation("TICKET_TYPE_X_EMITTED_TICKET", fields: [ticketTypeId], references: [id])

  ticketGroupId String       @db.Uuid
  ticketGroup   TicketGroup? @relation("TICKET_X_TICKET_GROUP", fields: [ticketGroupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz
  eventId   String?  @db.Uuid

  @@map("emittedTicket")
}

model EventCategory {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String

  events Event[] @relation("EVENT_X_CATEGORY")

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  @@map("eventCategory")
}

enum Role {
  ADMIN
  DOOR
}

enum TicketGroupStatus {
  BOOKED
  PAID
  FREE
}

enum TicketTypeCategory {
  FREE
  PAID
  TABLE
}
