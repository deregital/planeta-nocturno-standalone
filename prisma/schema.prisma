// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  password      String
  email         String          @unique
  emailVerified DateTime?       @db.Timestamptz
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  @@map("user")
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamptz
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz

  @@id([identifier, token])
  @@map("verificationToken")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}
